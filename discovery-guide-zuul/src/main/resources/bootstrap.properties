# 参考下面的链接获得更多的配置信息：
# https://github.com/Nepxion/Discovery/blob/master/discovery-springcloud-example-zuul/src/main/resources/

# Spring cloud config
spring.application.name=discovery-guide-zuul
server.port=5002
middleware.host=localhost

# Nacos config for discovery
spring.cloud.nacos.discovery.server-addr=${middleware.host}:8848

# Consul config for discovery
spring.cloud.consul.host=${middleware.host}
spring.cloud.consul.port=8500

# Eureka config for discovery
eureka.client.serviceUrl.defaultZone=http://${middleware.host}:9528/eureka/

# Zookeeper config for discovery
spring.cloud.zookeeper.connectString=${middleware.host}:2181
spring.cloud.zookeeper.discovery.instancePort=${server.port}
spring.cloud.zookeeper.discovery.root=/spring-cloud

# Spring cloud discovery metadata config
spring.cloud.discovery.metadata.group=discovery-guide-group
spring.cloud.discovery.metadata.version=1.0
# spring.cloud.discovery.metadata.env=env1
spring.cloud.discovery.metadata.active=true

# Nacos config for rule
spring.cloud.nacos.config.server-addr=${middleware.host}:8848

# Apollo config for rule
app.id=discovery
apollo.meta=http://106.54.227.205:8080

# Redis config for rule
spring.redis.host=${middleware.host}
spring.redis.port=6379
spring.redis.password=
spring.redis.database=0

# Zookeeper config for rule
zookeeper.connect-string=${middleware.host}:2181
zookeeper.retry-count=3
zookeeper.sleep-time=3000

# Consul config for rule
consul.host=${middleware.host}
consul.port=8500
consul.timeout=1
consul.token=

# Etcd config for rule
etcd.server.addr=http://${middleware.host}:2379
etcd.username=
etcd.password=

# OpenTracing config for jaeger
opentracing.jaeger.enabled=true
opentracing.jaeger.http-sender.url=http://${middleware.host}:14268/api/traces

# Ribbon config
ribbon.ServerListRefreshInterval=5000
ribbon.ConnectTimeout=60000
ribbon.ReadTimeout=60000
ribbon.maxAutoRetries=3
ribbon.maxAutoRetriesNextServer=3
ribbon.okToRetryOnAllOperations=true

# Management config
management.endpoints.web.exposure.include=*
management.endpoints.jmx.exposure.include=*
management.endpoint.health.show-details=ALWAYS
management.metrics.tags.application=${spring.application.name}

# Spring boot admin config
spring.boot.admin.client.instance.prefer-ip=true
spring.boot.admin.client.url=http://${middleware.host}:6002

# ========== 下面的配置，对于一般的业务系统来说，可以全部不需要 ==========
# Nepxion discovery config
# 当外界传值Header的时候，网关也设置并传递同名的Header，需要决定哪个Header传递到后边的服务去。如果下面开关为true，以网关设置为优先，否则以外界传值为优先。缺失则默认为true
spring.application.strategy.zuul.header.priority=false
# 当以网关设置为优先的时候，网关未配置Header，而外界配置了Header，仍旧忽略外界的Header。缺失则默认为true
# spring.application.strategy.zuul.original.header.ignored=true
# 开启和关闭网关订阅配置中心的动态路由策略。缺失则默认为false
spring.application.strategy.zuul.dynamic.route.enabled=true

# 启动和关闭监控，一旦关闭，调用链和日志输出都将关闭。缺失则默认为false
spring.application.strategy.monitor.enabled=true
# 启动和关闭告警，一旦关闭，蓝绿灰度上下文输出都将关闭。缺失则默认为false
spring.application.strategy.alarm.enabled=true
# 启动和关闭日志输出。缺失则默认为false
spring.application.strategy.logger.enabled=true
# 启动和关闭Debug日志打印，注意：每调用一次都会打印一次，会对性能有所影响，建议压测环境和生产环境关闭。缺失则默认为false
spring.application.strategy.logger.debug.enabled=true
# 启动和关闭调用链输出。缺失则默认为false
spring.application.strategy.tracer.enabled=true

# 启动和关闭消费端的服务隔离（基于Group是否相同的策略）。缺失则默认为false
spring.application.strategy.consumer.isolation.enabled=true

# 版本故障转移，即无法找到相应版本的服务实例，路由到老的稳定版本的实例。其作用是防止蓝绿灰度版本发布人为设置错误，或者对应的版本实例发生灾难性的全部下线，导致流量有损
# 在开启版本故障转移的开关前提下，故障转移有三种策略：
# 1. 如果“version-failover”值已配置，指定版本的故障转移，即找不到实例的时候，直接路由到该版本实例
# 2. 如果“version-failover”值未配置
#    2.1 开启“version.failover.stable.enabled”开关，版本列表排序策略的（取最老的稳定版本的实例）故障转移，即找不到实例的时候，直接路由到最老的稳定版本的实例
#    2.2 关闭“version.failover.stable.enabled”开关，负载均衡策略的故障转移，即找不到实例的时候，执行负载均衡策略
# 启动和关闭版本故障转移。缺失则默认为false
# spring.application.strategy.version.failover.enabled=true
# 开启和关闭版本列表排序策略下取稳定版本的版本故障转移。缺失则默认为false
# spring.application.strategy.version.failover.stable.enabled=true

# 版本偏好，即非蓝绿灰度发布场景下，路由到老的稳定版本的实例。其作用是防止多个网关上并行实施蓝绿灰度版本发布产生混乱，对处于非蓝绿灰度状态的服务，调用它的时候，只取它的老的稳定版本的实例；蓝绿灰度状态的服务，还是根据传递的Header版本号进行匹配
# 在开启版本偏好的开关前提下，偏好有两种策略：
# 1. 如果“version-prefer”值已配置，指定版本的偏好，即不管存在多少版本，直接路由到该版本实例
# 2. 如果“version-prefer”值未配置，版本列表排序策略的（取最老的稳定版本的实例）偏好，即不管存在多少版本，直接路由到最老的稳定版本的实例
# 启动和关闭版本偏好。缺失则默认为false
# spring.application.strategy.version.prefer.enabled=true

# 区域调试转移，即当未对服务指定访问区域的时候，转移到事先指定的区域
# 使用场景示例：
# 开发环境（个人电脑环境）在测试环境（线上环境）进行联调
# 访问路径为A服务 -> B服务 -> C服务，A服务和B服务在开发环境上，C服务在测试环境上
# 调用时候，在B服务上进行如下两个配置，并在最前端传入的Header（n-d-region）指定为B的开发环境区域（用来保证A服务和B服务只在开发环境调用），而B服务会自动转移调用到测试环境上的C服务实例，但不会转移到其它个人电脑的C服务实例
# 该功能的意义，个人电脑环境可以接入到测试环境联调，当多套个人环境接入时候，可以保护不同的个人环境间不会彼此调用
# 通过“region-transfer”值进行区域转移值配置，如果缺失，则报错
# 启动和关闭区域调试转移。缺失则默认为false
# spring.application.strategy.region.transfer.enabled=true

# 在开启区域故障转移的开关前提下，故障转移有两种策略：
# 1. 如果“region-failover”值已配置，指定区域的故障转移，即找不到实例的时候，直接路由到该区域实例
# 2. 如果“region-failover”值未配置，负载均衡策略的故障转移，即找不到实例的时候，执行负载均衡策略
# 启动和关闭区域故障转移。缺失则默认为false
# spring.application.strategy.region.failover.enabled=true

# 启动和关闭环境故障转移。缺失则默认为false
# 如果“env-failover”值未配置，则默认为common
# spring.application.strategy.environment.failover.enabled=true

# 启动和关闭可用区亲和性，即同一个可用区的服务才能调用，同一个可用区的条件是调用端实例和提供端实例的元数据Metadata的zone配置值必须相等。缺失则默认为false
# spring.application.strategy.zone.affinity.enabled=true

# 在开启可用区故障转移的开关前提下，故障转移有两种策略：
# 1. 如果“zone-failover”值已配置，指定可用区的故障转移，即找不到实例的时候，直接路由到该可用区实例
# 2. 如果“zone-failover”值未配置，负载均衡策略的故障转移，即找不到实例的时候，执行负载均衡策略
# 启动和关闭可用区故障转移。缺失则默认为false
# spring.application.strategy.zone.failover.enabled=true

# 在开启IP地址和端口故障转移的开关前提下，故障转移有两种策略：
# 1. 如果“address-failover”值已配置，指定IP地址或者端口的故障转移，即找不到实例的时候，直接路由到该IP地址或者端口实例
# 2. 如果“address-failover”值未配置，负载均衡策略的故障转移，即找不到实例的时候，执行负载均衡策略
# 启动和关闭IP地址和端口故障转移。缺失则默认为false
# spring.application.strategy.address.failover.enabled=true

# 下面配置只适用于网关里直接进行Feign、RestTemplate或者WebClient调用场景
# 启动和关闭路由策略的时候，对REST方式的调用拦截。缺失则默认为true
spring.application.strategy.rest.intercept.enabled=true
# 启动和关闭Header传递的Debug日志打印，注意：每调用一次都会打印一次，会对性能有所影响，建议压测环境和生产环境关闭。缺失则默认为false
spring.application.strategy.rest.intercept.debug.enabled=true
# 路由策略的时候，对REST方式调用拦截的时候（支持Feign、RestTemplate或者WebClient调用），希望把来自外部自定义的Header参数（用于框架内置上下文Header，例如：trace-id, span-id等）传递到服务里，那么配置如下值。如果多个用“;”分隔，不允许出现空格
spring.application.strategy.context.request.headers=trace-id;span-id
# 路由策略的时候，对REST方式调用拦截的时候（支持Feign、RestTemplate或者WebClient调用），希望把来自外部自定义的Header参数（用于业务系统自定义Header，例如：mobile）传递到服务里，那么配置如下值。如果多个用“;”分隔，不允许出现空格
spring.application.strategy.business.request.headers=user;mobile;location
# ========================================================================

# Zuul config
zuul.host.max-per-route-connections=1000
zuul.host.max-total-connections=1000
zuul.semaphore.max-semaphores=5000

# zuul.ribbon-isolation-strategy=THREAD

# zuul.prefix=/api

# 开启和关闭自动路由。缺失则默认开启自动路由
zuul.ignoredServices=*

# 手工配置路由。自动路由和手工动态路由允许混合使用
zuul.routes.route0.path=/discovery-guide-service-a/**
zuul.routes.route0.serviceId=discovery-guide-service-a
zuul.routes.route1.path=/x/**
zuul.routes.route1.serviceId=discovery-guide-service-a
zuul.routes.route2.path=/y/**
zuul.routes.route2.serviceId=discovery-guide-service-a

# logging.level.com.nepxion.discovery.guide=ERROR